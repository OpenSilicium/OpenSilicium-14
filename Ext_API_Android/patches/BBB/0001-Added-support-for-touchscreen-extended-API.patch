From 661c17adf4d7a4d65c8d128da47e4d8a4cb912e7 Mon Sep 17 00:00:00 2001
From: Pierre FICHEUX <pierre.ficheux@openwide.fr>
Date: Wed, 4 Mar 2015 15:03:00 +0100
Subject: [PATCH] Added support for touchscreen + extended API

---
 BoardConfig.mk          |    4 +-
 device.mk               |    9 ++++-
 gpio_keys_13.kl         |    6 +++
 temperhw/Android.mk     |   34 ++++++++++++++++
 temperhw/temperhw_bbb.c |  101 +++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 151 insertions(+), 3 deletions(-)
 create mode 100644 gpio_keys_13.kl
 create mode 100644 temperhw/Android.mk
 create mode 100644 temperhw/temperhw_bbb.c

diff --git a/BoardConfig.mk b/BoardConfig.mk
index 1e60875..e25e73c 100644
--- a/BoardConfig.mk
+++ b/BoardConfig.mk
@@ -29,7 +29,9 @@ TARGET_NO_BOOTLOADER := true
 TARGET_NO_RECOVERY := true
 
 BOARD_KERNEL_BASE := 0x80008000
-BOARD_KERNEL_CMDLINE := console=ttyO0,115200n8 androidboot.console=ttyO0 rootwait ro
+#BOARD_KERNEL_CMDLINE := console=ttyO0,115200n8 androidboot.console=ttyO0 rootwait ro
+# CAPE touchscreen config (qemu=1) => no hw acceleration
+BOARD_KERNEL_CMDLINE := console=ttyO0,115200n8 androidboot.console=ttyO0 androidboot.hardware=am335xevm rootwait ro init=/init ip=off qemu=1 vt.global_cursor_default=0
 
 TARGET_NO_RADIOIMAGE := true
 TARGET_BOARD_PLATFORM := omap3
diff --git a/device.mk b/device.mk
index b66d3e3..0a096d0 100644
--- a/device.mk
+++ b/device.mk
@@ -32,10 +32,14 @@ PRODUCT_COPY_FILES := \
 	device/ti/beagleboneblack/audio_policy.conf:system/etc/audio_policy.conf
 
 # KeyPads
-PRODUCT_COPY_FILES += \
+#PRODUCT_COPY_FILES += \
     $(LOCAL_PATH)/gpio-keys.kl:system/usr/keylayout/gpio-keys.kl \
     $(LOCAL_PATH)/ti-tsc.idc:system/usr/idc/ti-tsc.idc
 
+PRODUCT_COPY_FILES += \
+    $(LOCAL_PATH)/gpio_keys_13.kl:system/usr/keylayout/gpio_keys_13.kl \
+    $(LOCAL_PATH)/ti-tsc.idc:system/usr/idc/ti-tsc.idc
+
 PRODUCT_PROPERTY_OVERRIDES := \
        hwui.render_dirty_regions=false
 
@@ -76,7 +80,8 @@ PRODUCT_PACKAGES += \
 
 # Backlight HAL (liblights)
 PRODUCT_PACKAGES += \
-	lights.beagleboneblack
+	lights.beagleboneblack \
+	temperhw.beagleboneblack
 
 PRODUCT_PACKAGES += \
 	FileManager-1.1.6
diff --git a/gpio_keys_13.kl b/gpio_keys_13.kl
new file mode 100644
index 0000000..7cd4638
--- /dev/null
+++ b/gpio_keys_13.kl
@@ -0,0 +1,6 @@
+# Beaglebone LCD Cape  GPIO KEYPAD keylayout
+key 105   DPAD_LEFT       VIRTUAL
+key 106   DPAD_RIGHT      VIRTUAL
+key 103   DPAD_UP         VIRTUAL
+key 108   DPAD_DOWN       VIRTUAL
+key 28    BACK            VIRTUAL
diff --git a/temperhw/Android.mk b/temperhw/Android.mk
new file mode 100644
index 0000000..44be1b4
--- /dev/null
+++ b/temperhw/Android.mk
@@ -0,0 +1,34 @@
+# Copyright (C) 2014 Openwide
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+
+LOCAL_PATH:= $(call my-dir)
+
+ifeq ($(TARGET_PRODUCT),beagleboneblack)
+# HAL module implemenation, not prelinked and stored in
+# hw/<COPYPIX_HARDWARE_MODULE_ID>.<ro.board.platform>.so
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := temperhw_bbb.c
+
+LOCAL_PRELINK_MODULE := false
+LOCAL_MODULE_PATH := $(TARGET_OUT_SHARED_LIBRARIES)/hw
+
+LOCAL_SHARED_LIBRARIES := liblog libcutils libhardware
+LOCAL_MODULE_TAGS := optional 
+LOCAL_MODULE := temperhw.$(TARGET_PRODUCT)
+
+include $(BUILD_SHARED_LIBRARY)
+
+endif
diff --git a/temperhw/temperhw_bbb.c b/temperhw/temperhw_bbb.c
new file mode 100644
index 0000000..5220d3b
--- /dev/null
+++ b/temperhw/temperhw_bbb.c
@@ -0,0 +1,101 @@
+/*
+ *  Copyright (C) 2014 Open Wide
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+
+#define LOG_TAG "temperhw_bbb"
+
+#include <cutils/sockets.h>
+#include <stdint.h>
+#include <string.h>
+#include <unistd.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <pthread.h>
+
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <cutils/log.h>
+
+#include <hardware/temperhw.h>
+
+int temperhw__read(char* buffer, int length)
+{
+  int retval, fd;
+
+  /*
+   * Do something like "cat /dev/temper0" (open/read/close)
+   */
+  fd = open("/dev/temper0", O_RDONLY);
+
+  if (fd < 0) {
+    ALOGI("Failed to open device!\n");
+    return -1;
+  }
+
+  ALOGI("Temper HW - read() for %d bytes called", length);
+  retval = read(fd, buffer, length);
+  ALOGI("Temper HW - read() = %s %d\n", buffer, retval);
+
+  close(fd);
+
+  return retval;
+}
+
+int temperhw__test(int value)
+{
+  return value;
+}
+
+static int close_temperhw(struct temperhw_device_t *dev){
+  ALOGI("close_temperhw\n");
+
+  if (dev)
+    free(dev);
+  return 0;
+}
+
+static int open_temperhw(const struct hw_module_t* module, char const* name, struct hw_device_t** device)
+{
+  struct temperhw_device_t *dev = malloc(sizeof(struct temperhw_device_t));
+  memset(dev, 0, sizeof(*dev));
+
+  ALOGI("open_temperhw\n");
+
+  dev->common.tag = HARDWARE_DEVICE_TAG;
+  dev->common.version = 0;
+  dev->common.module = (struct hw_module_t*)module;
+  dev->common.close = (int (*)(struct hw_device_t *))close_temperhw;
+  dev->read = temperhw__read;
+  dev->test = temperhw__test;
+  *device = (struct hw_device_t*) dev;
+
+  return 0;
+}
+
+static struct hw_module_methods_t temperhw_module_methods = {
+  .open = open_temperhw
+};
+
+struct hw_module_t HAL_MODULE_INFO_SYM = {
+  .tag = HARDWARE_MODULE_TAG,
+  .version_major = 1,
+  .version_minor = 0,
+  .id = TEMPERHW_HARDWARE_MODULE_ID,
+  .name = "Temper HW Module",
+  .author = "Open Wide",
+  .methods = &temperhw_module_methods,
+};
-- 
1.7.9.5

